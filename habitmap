#!/usr/bin/python3

import main

import os
import json
import sys 

os.chdir(os.path.dirname(os.path.realpath(__file__)))  

try:
    dic = json.load(open(os.getcwd()+'/stats.json'))
except:
    dic = {}

if not dic:
    dic["stepno"] = 4

comms = """
    list of arguments:

    -e, --e.g.      [args]                  (optional [args])           description

    -a, --add       [name]                                              add a new habit (if not already existing).
    -r, --remove    [habit]                                             remove a habit.
    -t, --track     [habit] [day] [stepno]                              add or edit a record.

    -l, --list                                                          list all habits.
    -d, --day       [day]                   ([color])                   view day heatmap for all habits.      
    -y, --year      [habit] [year]          ([color])                   view year heatmap for habit.

    -h, --help                                                          see all commands and explanations.
    -s, --steps     [number]                                            set the default number of steps in heatmap (number from 1-4)                                                                    
"""

help = """
    commands:

        changing data:

        -a, --add [name]: add a new habit.
        adds a new habit with name [name] to the database.
        
        [name]: any string.

        -r, --remove [name]: removes a habit.
        removes the habit named [name] from the database.

        [name]: any string.

        -l, --list: lists all habits.

        -t, --track [habit] [day] [stepno]: adds or edits a record.
        adds or edits the record of habit [habit] on [day] (0 by default) and changes it to [stepno].

        [habit]: name of an existing habit.
        [day]: either "tdy", "yst", or a date in ISO format (YYYY-MM-DD).
        [stepno]: a number from 0 to the default step number

        seeing data:
        
        -d, --day [day] ([color]): view day heatmap for all habits.
        displays a single bar of each habit's data on [day], optionally in [color]
        
        [day]: any day.
        [color]: any hex code (no preceding "#")

        -y, --year [habit] [year] ([color]): displays a heatmap.
        displays a calendar heatmap of the data in [habit] for [year], optionally in [color].

        [habit]: name of an existing habit.
        [year]: any valid integer from 1 to 9999 (based on python's datetime module's limits)
        [color]: any hex code (no preceding "#")

        miscellaneous:

        -h, --help: see this message.

        -s, --steps [number]: sets the default number of steps.
        sets the default number of steps (at the moment, this number of steps applies to all habits)
        having one step would mean that you either have or have not done the habit but having more steps allows you to indicate anything in between.

        [number]: any number from 1-4.

    explaining steps:

        steps are the number of different values enterable for each record. if a habit only has the option to be marked as done or not done, we count that as one step.
        if a habit has two steps, one would be allowed to mark the habit as done, undone or half-done. similar rules apply for three or four steps.
        the step conversion table is as follows:
        
        og max no. of steps:    in 1-step:      in 2-step:      in 3-step       in 4-step:
        1 (0, 1)                (0, 1)          (0, 2)          (0, 3)          (0, 4)
        2 (0, 1, 2)             (0, 1, 1)       (0, 1, 2)       (0, 2, 3)       (0, 2, 4)
        3 (0, 1, 2, 3)          (0, 0, 1, 1)    (0, 1, 1, 2)    (0, 1, 2, 3)    (0, 1, 3, 4)
        4 (0, 1, 2, 3, 4)       (0, 0, 1, 1, 1) (0, 1, 1, 2, 2) (0, 1, 2, 2, 3) (0, 1, 2, 3, 4)

        note that in printing heatmaps, all numbers will be converted to their 4-step equivalents.
"""

if len(sys.argv) == 1:
    print(comms)
else:
    match sys.argv[1]:
        case "-a" | "--add":
            try:
                main.add(dic, sys.argv[2])
            except:
                print("not enough arguments.")
        case "-h" | "--help":
            print(help)
        case "-l" | "--list":
            for habit in dic:
                if habit != "stepno":
                    print(habit)
        case "-d" | "-day":
            match len(sys.argv):
                case 3:
                    main.daymap(sys.argv[2], sys.argv[2], "000000")
                case 4:
                    main.daymap(sys.argv[2], *sys.argv[2:4])
                case _:
                    print("not enough arguments.")
        case "-y" | "-year":
            match len(sys.argv):
                case 4:
                    main.yearmap(*sys.argv[2:4], "000000")
                case 5:
                    main.yearmap(*sys.argv[2:5])
                case _:
                    print("not enough arguments.")
        case "-r" | "--remove":
            try:
                if sys.argv[2] == "stepno":
                    print("stepno cannot be deleted.")
                else:
                    try:
                        del dic[sys.argv[2]]
                    except:
                        print("not found")
                    else:
                        print(f"{sys.argv[2]} deleted.")
            except:
                print("not enough arguments.")
        case "-s" | "--steps":
            if len(sys.argv) == 3: 
                try:
                    new = int(sys.argv[2])
                    if new < 1 or new > 4:
                        raise TypeError
                except:
                    print("invalid number.")
                else:
                    dic["stepno"] = new
            else:
                print("not enough arguments.")
        case "-t" | "--track":
            if len(sys.argv) == 5:
                main.track(dic, *sys.argv[2:5])
            else:
                print("not enough arguments.")
        case _:
            print("invalid command.")

open(os.getcwd()+"/stats.json", "w").write(json.dumps(dic, indent=4))
